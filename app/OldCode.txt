
    private class BinaryFilter(): ImageAnalysis.Analyzer{
        override fun analyze(image: ImageProxy) {


            //Log.d(TAG, "reached!")

            val buffer = image.planes[0].buffer
            //val bufferContentLength = image.height * image.width -1

            buffer.rewind()
            val bufferContentLength = buffer.remaining()

            //Log.d(TAG, "image: $bufferContentLength, remaining: ${buffer.remaining()}")

            // create an all 0's buffer to replace the data
            val newData = ByteArray(buffer.remaining())
            newData.forEachIndexed { index, _ -> newData[index] = 0 }

/*

            buffer.flip() // changing to writing mode
            buffer.rewind() // go to start of the array
            buffer.put(newData)*/

            //buffer.flip()
/*
            if(buffer.hasArray()){
                Log.d(TAG, "ARRAY #################")
                val array = buffer.array()

                for(i in 0..bufferContentLength-1) {
                    //val pixel = buffer[i]
                    //Log.d(TAG, "pixel $i: $pixel")
                    //buffer.put(i, 0)
                    array[i] = 0



                    //buffer.putInt(i, 0xFF)
                }
            }else{
                Log.d(TAG, "NO ARRAY")
            }*/



            //image.planes[0].buffer.apply { put() }

            image.close()
        }
    }